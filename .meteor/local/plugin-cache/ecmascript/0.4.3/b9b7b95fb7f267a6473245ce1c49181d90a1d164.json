{"metadata":{"usedHelpers":["classCallCheck","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/ssr_context.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/ssr_context.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/ssr_context.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/ssr_context.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ssr_context"},"ignored":false,"code":"var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar deepMerge = require('deepmerge');\n\nSsrContext = function () {\n  function SsrContext() {\n    (0, _classCallCheck3['default'])(this, SsrContext);\n\n    this._html = '';\n    this._head = '';\n    this._collections = {};\n  }\n\n  SsrContext.prototype.getCollection = function () {\n    function getCollection(collName) {\n      var collection = this._collections[collName];\n      if (!collection) {\n        var minimongo = Package.minimongo;\n        collection = this._collections[collName] = new minimongo.LocalCollection();\n      }\n\n      return collection;\n    }\n\n    return getCollection;\n  }();\n\n  SsrContext.prototype.setHtml = function () {\n    function setHtml(html) {\n      this._html = html;\n    }\n\n    return setHtml;\n  }();\n\n  SsrContext.prototype.getHtml = function () {\n    function getHtml() {\n      return this._html;\n    }\n\n    return getHtml;\n  }();\n\n  SsrContext.prototype.addToHead = function () {\n    function addToHead(headHtml) {\n      this._head += '\\n' + headHtml;\n    }\n\n    return addToHead;\n  }();\n\n  SsrContext.prototype.getHead = function () {\n    function getHead() {\n      return this._head;\n    }\n\n    return getHead;\n  }();\n\n  SsrContext.prototype.addSubscription = function () {\n    function addSubscription(name, params) {\n      var fastRenderContext = FastRender.frContext.get();\n      if (!fastRenderContext) {\n        throw new Error('Cannot add a subscription: ' + name + ' without FastRender Context');\n      }\n\n      var args = [name].concat(params);\n      var data = fastRenderContext.subscribe.apply(fastRenderContext, (0, _toConsumableArray3['default'])(args));\n      this.addData(data);\n    }\n\n    return addSubscription;\n  }();\n\n  SsrContext.prototype.addData = function () {\n    function addData(data) {\n      var _this = this;\n\n      _.each(data, function (collDataCollection, collectionName) {\n        var collection = _this.getCollection(collectionName);\n        collDataCollection.forEach(function (collData) {\n          collData.forEach(function (item) {\n            var existingDoc = collection.findOne(item._id);\n            if (existingDoc) {\n              var newDoc = deepMerge(existingDoc, item);\n              delete newDoc._id;\n              collection.update(item._id, newDoc);\n            } else {\n              collection.insert(item);\n            }\n          });\n        });\n      });\n    }\n\n    return addData;\n  }();\n\n  return SsrContext;\n}();","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/ssr_context.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,YAAY,QAAQ,WAAR,CAAZ;;AAEN;AACE,wBAAc;;;AACZ,SAAK,KAAL,GAAa,EAAb,CADY;AAEZ,SAAK,KAAL,GAAa,EAAb,CAFY;AAGZ,SAAK,YAAL,GAAoB,EAApB,CAHY;GAAd;;uBAMA;2BAAc,UAAU;AACtB,UAAI,aAAa,KAAK,YAAL,CAAkB,QAAlB,CAAb,CADkB;AAEtB,UAAI,CAAC,UAAD,EAAa;AACf,YAAM,YAAY,QAAQ,SAAR,CADH;AAEf,qBAAa,KAAK,YAAL,CAAkB,QAAlB,IAA8B,IAAI,UAAU,eAAV,EAAlC,CAFE;OAAjB;;AAKA,aAAO,UAAP,CAPsB;;;;;;uBAUxB;qBAAQ,MAAM;AACZ,WAAK,KAAL,GAAa,IAAb,CADY;;;;;;uBAId;uBAAU;AACR,aAAO,KAAK,KAAL,CADC;;;;;;uBAIV;uBAAU,UAAU;AAClB,WAAK,KAAL,WAAmB,QAAnB,CADkB;;;;;;uBAIpB;uBAAU;AACR,aAAO,KAAK,KAAL,CADC;;;;;;uBAIV;6BAAgB,MAAM,QAAQ;AAC5B,UAAM,oBAAoB,WAAW,SAAX,CAAqB,GAArB,EAApB,CADsB;AAE5B,UAAI,CAAC,iBAAD,EAAoB;AACtB,cAAM,IAAI,KAAJ,iCAC0B,oCAD1B,CAAN,CADsB;OAAxB;;AAMA,UAAM,OAAO,CAAC,IAAD,EAAO,MAAP,CAAc,MAAd,CAAP,CARsB;AAS5B,UAAM,OAAO,kBAAkB,SAAlB,8DAA+B,KAA/B,CAAP,CATsB;AAU5B,WAAK,OAAL,CAAa,IAAb,EAV4B;;;;;;uBAa9B;qBAAQ,MAAM;;;AACZ,QAAE,IAAF,CAAO,IAAP,EAAa,UAAC,kBAAD,EAAqB,cAArB,EAAwC;AACnD,YAAM,aAAa,MAAK,aAAL,CAAmB,cAAnB,CAAb,CAD6C;AAEnD,2BAAmB,OAAnB,CAA2B,UAAC,QAAD,EAAc;AACvC,mBAAS,OAAT,CAAiB,UAAC,IAAD,EAAU;AACzB,gBAAM,cAAc,WAAW,OAAX,CAAmB,KAAK,GAAL,CAAjC,CADmB;AAEzB,gBAAI,WAAJ,EAAiB;AACf,kBAAM,SAAS,UAAU,WAAV,EAAuB,IAAvB,CAAT,CADS;AAEf,qBAAO,OAAO,GAAP,CAFQ;AAGf,yBAAW,MAAX,CAAkB,KAAK,GAAL,EAAU,MAA5B,EAHe;aAAjB,MAIO;AACL,yBAAW,MAAX,CAAkB,IAAlB,EADK;aAJP;WAFe,CAAjB,CADuC;SAAd,CAA3B,CAFmD;OAAxC,CAAb,CADY;;;;;;;GA9ChB","file":"/packages/kadira:flow-router-ssr/server/ssr_context.js.map","sourcesContent":["const deepMerge = require('deepmerge');\n\nSsrContext = class {\n  constructor() {\n    this._html = '';\n    this._head = '';\n    this._collections = {};\n  }\n\n  getCollection(collName) {\n    let collection = this._collections[collName];\n    if (!collection) {\n      const minimongo = Package.minimongo;\n      collection = this._collections[collName] = new minimongo.LocalCollection();\n    }\n\n    return collection;\n  }\n\n  setHtml(html) {\n    this._html = html;\n  }\n\n  getHtml() {\n    return this._html;\n  }\n\n  addToHead(headHtml) {\n    this._head += `\\n${headHtml}`;\n  }\n\n  getHead() {\n    return this._head;\n  }\n\n  addSubscription(name, params) {\n    const fastRenderContext = FastRender.frContext.get();\n    if (!fastRenderContext) {\n      throw new Error(\n        `Cannot add a subscription: ${name} without FastRender Context`\n      );\n    }\n\n    const args = [name].concat(params);\n    const data = fastRenderContext.subscribe(...args);\n    this.addData(data);\n  }\n\n  addData(data) {\n    _.each(data, (collDataCollection, collectionName) => {\n      const collection = this.getCollection(collectionName);\n      collDataCollection.forEach((collData) => {\n        collData.forEach((item) => {\n          const existingDoc = collection.findOne(item._id);\n          if (existingDoc) {\n            const newDoc = deepMerge(existingDoc, item);\n            delete newDoc._id;\n            collection.update(item._id, newDoc);\n          } else {\n            collection.insert(item);\n          }\n        });\n      });\n    });\n  }\n};\n"]},"hash":"b9b7b95fb7f267a6473245ce1c49181d90a1d164"}
