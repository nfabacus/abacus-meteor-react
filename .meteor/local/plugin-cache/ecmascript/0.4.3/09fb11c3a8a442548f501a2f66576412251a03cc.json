{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/lib/group.js","filenameRelative":"/packages/kadira:flow-router-ssr/lib/group.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/lib/group.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/lib/group.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"group"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nSharedGroup = function () {\n  function SharedGroup(router, options, parent) {\n    (0, _classCallCheck3[\"default\"])(this, SharedGroup);\n\n    options = options || {};\n\n    if (options.prefix && !/^\\/.*/.test(options.prefix)) {\n      var message = \"group's prefix must start with '/'\";\n      throw new Error(message);\n    }\n\n    this.prefix = options.prefix || '';\n    this.options = options;\n    this._router = router;\n    this.parent = parent;\n  }\n\n  SharedGroup.prototype.route = function () {\n    function route(pathDef, options, group) {\n      options = options || {};\n\n      if (!/^\\/.*/.test(pathDef)) {\n        var message = \"route's path must start with '/'\";\n        throw new Error(message);\n      }\n\n      pathDef = this.prefix + pathDef;\n\n      group = group || this;\n\n      return this._router.route(pathDef, options, group);\n    }\n\n    return route;\n  }();\n\n  SharedGroup.prototype.group = function () {\n    function group(options) {\n      return new Group(this._router, options, this);\n    }\n\n    return group;\n  }();\n\n  return SharedGroup;\n}();","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/lib/group.js"],"names":[],"mappings":";;;;;;AAAA;AACE,uBAAY,MAAZ,EAAoB,OAApB,EAA6B,MAA7B,EAAqC;;;AACnC,cAAU,WAAW,EAAX,CADyB;;AAGnC,QAAI,QAAQ,MAAR,IAAkB,CAAC,QAAQ,IAAR,CAAa,QAAQ,MAAR,CAAd,EAA+B;AACnD,UAAM,UAAU,oCAAV,CAD6C;AAEnD,YAAM,IAAI,KAAJ,CAAU,OAAV,CAAN,CAFmD;KAArD;;AAKA,SAAK,MAAL,GAAc,QAAQ,MAAR,IAAkB,EAAlB,CARqB;AASnC,SAAK,OAAL,GAAe,OAAf,CATmC;AAUnC,SAAK,OAAL,GAAe,MAAf,CAVmC;AAWnC,SAAK,MAAL,GAAc,MAAd,CAXmC;GAArC;;wBAcA;mBAAM,SAAS,SAAS,OAAO;AAC7B,gBAAU,WAAW,EAAX,CADmB;;AAG7B,UAAI,CAAC,QAAQ,IAAR,CAAa,OAAb,CAAD,EAAwB;AAC1B,YAAM,UAAU,kCAAV,CADoB;AAE1B,cAAM,IAAI,KAAJ,CAAU,OAAV,CAAN,CAF0B;OAA5B;;AAKA,gBAAU,KAAK,MAAL,GAAc,OAAd,CARmB;;AAU7B,cAAQ,SAAS,IAAT,CAVqB;;AAY7B,aAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,OAAnB,EAA4B,OAA5B,EAAqC,KAArC,CAAP,CAZ6B;;;;;;wBAe/B;mBAAM,SAAS;AACb,aAAO,IAAI,KAAJ,CAAU,KAAK,OAAL,EAAc,OAAxB,EAAiC,IAAjC,CAAP,CADa;;;;;;;GA9BjB","file":"/packages/kadira:flow-router-ssr/lib/group.js.map","sourcesContent":["SharedGroup = class {\n  constructor(router, options, parent) {\n    options = options || {};\n\n    if (options.prefix && !/^\\/.*/.test(options.prefix)) {\n      const message = \"group's prefix must start with '/'\";\n      throw new Error(message);\n    }\n\n    this.prefix = options.prefix || '';\n    this.options = options;\n    this._router = router;\n    this.parent = parent;\n  }\n\n  route(pathDef, options, group) {\n    options = options || {};\n\n    if (!/^\\/.*/.test(pathDef)) {\n      const message = \"route's path must start with '/'\";\n      throw new Error(message);\n    }\n\n    pathDef = this.prefix + pathDef;\n\n    group = group || this;\n\n    return this._router.route(pathDef, options, group);\n  }\n\n  group(options) {\n    return new Group(this._router, options, this);\n  }\n};\n"]},"hash":"09fb11c3a8a442548f501a2f66576412251a03cc"}
