{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ssr_data"},"ignored":false,"code":"describe('SSR Data', function () {\n  context('Meteor.subscribe()', function () {\n    context('with a SSR Context', function () {\n      it('should add the subscription to SSR Context', function (done) {\n        var ssrContext = {\n          addSubscription: function () {\n            function addSubscription(name, params) {\n              expect(name).to.be.equal('subName');\n              expect(params).to.be.deep.equal(['one', 'two']);\n              done();\n            }\n\n            return addSubscription;\n          }()\n        };\n\n        FlowRouter.ssrContext.withValue(ssrContext, function () {\n          Meteor.subscribe('subName', 'one', 'two');\n        });\n      });\n\n      it('should have the FlowRouter.inSubscription env', function (done) {\n        var ssrContext = {\n          addSubscription: function () {\n            function addSubscription() {\n              expect(FlowRouter.inSubscription.get()).to.be['true'];\n              done();\n            }\n\n            return addSubscription;\n          }()\n        };\n\n        FlowRouter.ssrContext.withValue(ssrContext, function () {\n          Meteor.subscribe('subName', 'one', 'two');\n        });\n      });\n    });\n\n    context('always', function () {\n      it('should return ready => true', function () {\n        var handle = Meteor.subscribe('aa', 'bb');\n        expect(handle.ready()).to.be['true'];\n      });\n    });\n  });\n\n  context('Mongo.find()', function () {\n    context('with a SSR Context', function () {\n      context('not inside a subscription', function () {\n        it('should get the collection from the ssrContext', function (done) {\n          var cursor = {};\n          var collName = Random.id();\n          var selector = { aa: 10 };\n          var options = { bb: 20 };\n\n          var ssrCollection = {\n            find: function () {\n              function find(s, o) {\n                expect(s).to.be.deep.equal(selector);\n                expect(o).to.be.deep.equal(options);\n                return cursor;\n              }\n\n              return find;\n            }()\n          };\n\n          var ssrContext = {\n            getCollection: function () {\n              function getCollection(name) {\n                expect(name).to.be.equal(collName);\n                return ssrCollection;\n              }\n\n              return getCollection;\n            }()\n          };\n\n          FlowRouter.ssrContext.withValue(ssrContext, function () {\n            var coll = new Mongo.Collection(collName);\n            var c = coll.find(selector, options);\n            expect(c).to.be.equal(cursor);\n            done();\n          });\n        });\n      });\n\n      context('inside a subscription', function () {\n        it('should call the original collection', function (done) {\n          var collName = Random.id();\n          var ssrContext = new SsrContext();\n\n          FlowRouter.ssrContext.withValue(ssrContext, function () {\n            var coll = new Mongo.Collection(collName);\n            var doc = { _id: '100', aa: 10 };\n            coll.insert(doc);\n            coll.insert({ _id: '200', aa: 20 });\n            coll.insert({ _id: '300', aa: 10 });\n\n            FlowRouter.inSubscription.withValue(true, function () {\n              var options = { sort: { _id: 1 }, limit: 1 };\n              var data = coll.find({ aa: 10 }, options).fetch();\n              expect(data).to.be.equal([doc]);\n              done();\n            });\n          });\n        });\n      });\n    });\n\n    context('without a SSR Context', function () {\n      it('should call the original find', function () {\n        var collName = Random.id();\n        var coll = new Mongo.Collection(collName);\n        var doc = { _id: '100', aa: 10 };\n        coll.insert(doc);\n        coll.insert({ _id: '200', aa: 20 });\n        coll.insert({ _id: '300', aa: 10 });\n\n        var options = { sort: { _id: 1 }, limit: 1 };\n        var data = coll.find({ aa: 10 }, options).fetch();\n        expect(data).to.be.equal([doc]);\n      });\n    });\n  });\n\n  context('Mongo.findOne()', function () {\n    it('should call the new wrapped Mongo.find()', function (done) {\n      var collName = Random.id();\n      var selector = { aa: 10 };\n      var options = { bb: 20 };\n      var data = [{ _id: 'one', aa: 10 }, { _id: 'two', aa: 20 }];\n\n      var cursor = {\n        fetch: function () {\n          function fetch() {\n            return data;\n          }\n\n          return fetch;\n        }()\n      };\n\n      var ssrCollection = {\n        find: function () {\n          function find(s, o) {\n            expect(s).to.be.deep.equal(selector);\n            expect(o).to.be.deep.equal(options);\n            return cursor;\n          }\n\n          return find;\n        }()\n      };\n\n      var ssrContext = {\n        getCollection: function () {\n          function getCollection(name) {\n            expect(name).to.be.equal(collName);\n            return ssrCollection;\n          }\n\n          return getCollection;\n        }()\n      };\n\n      FlowRouter.ssrContext.withValue(ssrContext, function () {\n        var coll = new Mongo.Collection(collName);\n        var doc = coll.findOne(selector, options);\n        expect(doc).to.be.equal(data[0]);\n        done();\n      });\n    });\n  });\n\n  context('Meteor.call', function () {\n    context('with a SSR Context', function () {\n      it('should call the method with the SSR Context', function () {\n        var _Meteor$methods;\n\n        var methodName = Random.id();\n        var ssrContext = new SsrContext();\n\n        Meteor.methods((_Meteor$methods = {}, _Meteor$methods[methodName] = function (a, b) {\n          expect(FlowRouter.ssrContext.get()).to.be['null'];\n          return a + b;\n        }, _Meteor$methods));\n\n        FlowRouter.ssrContext.withValue(ssrContext, function () {\n          var result = Meteor.call(methodName, 10, 20);\n          expect(result).to.be.equal(30);\n        });\n      });\n\n      it('should bind the original function with Meteor.bindEnvironemnt', function (done) {\n        var _Meteor$methods2;\n\n        var methodName = Random.id();\n        var ssrContext = new SsrContext();\n        var sampleEnv = new Meteor.EnvironmentVariable();\n\n        Meteor.methods((_Meteor$methods2 = {}, _Meteor$methods2[methodName] = function () {\n          expect(sampleEnv.get()).to.be['true'];\n          done();\n        }, _Meteor$methods2));\n\n        sampleEnv.withValue(true, function () {\n          FlowRouter.ssrContext.withValue(ssrContext, function () {\n            Meteor.call(methodName);\n          });\n        });\n      });\n    });\n  });\n\n  context('Meteor.loggingIn', function () {\n    context('always', function () {\n      it('should return false', function () {\n        expect(Meteor.loggingIn()).to.be['false'];\n      });\n    });\n  });\n\n  context('Tracker.autorun', function () {\n    context('with a SSR Context', function () {\n      it('should call the function immediately & stop invalidating', function (done) {\n        var ssrContext = new SsrContext();\n        var someVar = new ReactiveVar();\n        var runCount = 0;\n\n        FlowRouter.ssrContext.withValue(ssrContext, function () {\n          Tracker.autorun(function () {\n            someVar.get();\n            runCount++;\n          });\n\n          // this is to check the autorun function runs immediately.\n          expect(runCount).to.be.equal(1);\n\n          // this is to check autorun won't run again for invalidations\n          someVar.set(200);\n          Meteor.setTimeout(function () {\n            expect(runCount).to.be.equal(1);\n            done();\n          }, 200);\n        });\n      });\n\n      it('should has the firstRun=true option', function (done) {\n        FlowRouter.ssrContext.withValue(new SsrContext(), function () {\n          Tracker.autorun(function (c) {\n            expect(c.firstRun).to.be['true'];\n            done();\n          });\n        });\n      });\n\n      it('should has a stop option which does nothing', function (done) {\n        FlowRouter.ssrContext.withValue(new SsrContext(), function () {\n          Tracker.autorun(function (c) {\n            // this is just a test to make sure we've a stop function\n            c.stop();\n            done();\n          });\n        });\n      });\n    });\n\n    context('without a SSR Context', function () {\n      it('should call the original Tracker.autorun', function (done) {\n        var someVar = new ReactiveVar();\n        var runCount = 0;\n\n        var c = Tracker.autorun(function () {\n          someVar.get();\n          runCount++;\n        });\n\n        someVar.set(200);\n        Meteor.setTimeout(function () {\n          expect(runCount).to.be.equal(2);\n          c.stop();\n          done();\n        }, 200);\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js"],"names":[],"mappings":"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","file":"/packages/kadira:flow-router-ssr/server/plugins/__tests__/ssr_data.js.map","sourcesContent":["describe('SSR Data', () => {\n  context('Meteor.subscribe()', () => {\n    context('with a SSR Context', () => {\n      it('should add the subscription to SSR Context', done => {\n        const ssrContext = {\n          addSubscription: (name, params) => {\n            expect(name).to.be.equal('subName');\n            expect(params).to.be.deep.equal(['one', 'two']);\n            done();\n          }\n        };\n\n        FlowRouter.ssrContext.withValue(ssrContext, () => {\n          Meteor.subscribe('subName', 'one', 'two');\n        });\n      });\n\n      it('should have the FlowRouter.inSubscription env', done => {\n        const ssrContext = {\n          addSubscription: () => {\n            expect(FlowRouter.inSubscription.get()).to.be.true;\n            done();\n          }\n        };\n\n        FlowRouter.ssrContext.withValue(ssrContext, () => {\n          Meteor.subscribe('subName', 'one', 'two');\n        });\n      });\n    });\n\n    context('always', () => {\n      it('should return ready => true', () => {\n        const handle = Meteor.subscribe('aa', 'bb');\n        expect(handle.ready()).to.be.true;\n      });\n    });\n  });\n\n  context('Mongo.find()', () => {\n    context('with a SSR Context', () => {\n      context('not inside a subscription', () => {\n        it('should get the collection from the ssrContext', done => {\n          const cursor = {};\n          const collName = Random.id();\n          const selector = {aa: 10};\n          const options = {bb: 20};\n\n          const ssrCollection = {\n            find: (s, o) => {\n              expect(s).to.be.deep.equal(selector);\n              expect(o).to.be.deep.equal(options);\n              return cursor;\n            }\n          };\n\n          const ssrContext = {\n            getCollection: name => {\n              expect(name).to.be.equal(collName);\n              return ssrCollection;\n            }\n          };\n\n          FlowRouter.ssrContext.withValue(ssrContext, () => {\n            const coll = new Mongo.Collection(collName);\n            const c = coll.find(selector, options);\n            expect(c).to.be.equal(cursor);\n            done();\n          });\n        });\n      });\n\n      context('inside a subscription', () => {\n        it('should call the original collection', done => {\n          const collName = Random.id();\n          const ssrContext = new SsrContext();\n\n          FlowRouter.ssrContext.withValue(ssrContext, () => {\n            const coll = new Mongo.Collection(collName);\n            const doc = {_id: '100', aa: 10};\n            coll.insert(doc);\n            coll.insert({_id: '200', aa: 20});\n            coll.insert({_id: '300', aa: 10});\n\n            FlowRouter.inSubscription.withValue(true, () => {\n              const options = {sort: {_id: 1}, limit: 1};\n              const data = coll.find({aa: 10}, options).fetch();\n              expect(data).to.be.equal([doc]);\n              done();\n            });\n          });\n        });\n      });\n    });\n\n    context('without a SSR Context', () => {\n      it('should call the original find', () => {\n        const collName = Random.id();\n        const coll = new Mongo.Collection(collName);\n        const doc = {_id: '100', aa: 10};\n        coll.insert(doc);\n        coll.insert({_id: '200', aa: 20});\n        coll.insert({_id: '300', aa: 10});\n\n        const options = {sort: {_id: 1}, limit: 1};\n        const data = coll.find({aa: 10}, options).fetch();\n        expect(data).to.be.equal([doc]);\n      });\n    });\n  });\n\n  context('Mongo.findOne()', () => {\n    it('should call the new wrapped Mongo.find()', done => {\n      const collName = Random.id();\n      const selector = {aa: 10};\n      const options = {bb: 20};\n      const data = [{_id: 'one', aa: 10}, {_id: 'two', aa: 20}];\n\n      const cursor = {\n        fetch: () => data\n      };\n\n      const ssrCollection = {\n        find: (s, o) => {\n          expect(s).to.be.deep.equal(selector);\n          expect(o).to.be.deep.equal(options);\n          return cursor;\n        }\n      };\n\n      const ssrContext = {\n        getCollection: name => {\n          expect(name).to.be.equal(collName);\n          return ssrCollection;\n        }\n      };\n\n      FlowRouter.ssrContext.withValue(ssrContext, () => {\n        const coll = new Mongo.Collection(collName);\n        const doc = coll.findOne(selector, options);\n        expect(doc).to.be.equal(data[0]);\n        done();\n      });\n    });\n  });\n\n  context('Meteor.call', () => {\n    context('with a SSR Context', () => {\n      it('should call the method with the SSR Context', () => {\n        const methodName = Random.id();\n        const ssrContext = new SsrContext();\n\n        Meteor.methods({\n          [methodName]: (a, b) => {\n            expect(FlowRouter.ssrContext.get()).to.be.null;\n            return a + b;\n          }\n        });\n\n        FlowRouter.ssrContext.withValue(ssrContext, () => {\n          const result = Meteor.call(methodName, 10, 20);\n          expect(result).to.be.equal(30);\n        });\n      });\n\n      it('should bind the original function with Meteor.bindEnvironemnt', done => {\n        const methodName = Random.id();\n        const ssrContext = new SsrContext();\n        const sampleEnv = new Meteor.EnvironmentVariable();\n\n        Meteor.methods({\n          [methodName]: () => {\n            expect(sampleEnv.get()).to.be.true;\n            done();\n          }\n        });\n\n        sampleEnv.withValue(true, () => {\n          FlowRouter.ssrContext.withValue(ssrContext, () => {\n            Meteor.call(methodName);\n          });\n        });\n      });\n    });\n  });\n\n  context('Meteor.loggingIn', () => {\n    context('always', () => {\n      it('should return false', () => {\n        expect(Meteor.loggingIn()).to.be.false;\n      });\n    });\n  });\n\n  context('Tracker.autorun', () => {\n    context('with a SSR Context', () => {\n      it('should call the function immediately & stop invalidating', done => {\n        const ssrContext = new SsrContext();\n        const someVar = new ReactiveVar();\n        let runCount = 0;\n\n        FlowRouter.ssrContext.withValue(ssrContext, () => {\n          Tracker.autorun(() => {\n            someVar.get();\n            runCount++;\n          });\n\n          // this is to check the autorun function runs immediately.\n          expect(runCount).to.be.equal(1);\n\n          // this is to check autorun won't run again for invalidations\n          someVar.set(200);\n          Meteor.setTimeout(() => {\n            expect(runCount).to.be.equal(1);\n            done();\n          }, 200);\n        });\n      });\n\n      it('should has the firstRun=true option', done => {\n        FlowRouter.ssrContext.withValue(new SsrContext(), () => {\n          Tracker.autorun(c => {\n            expect(c.firstRun).to.be.true;\n            done();\n          });\n        });\n      });\n\n      it('should has a stop option which does nothing', done => {\n        FlowRouter.ssrContext.withValue(new SsrContext(), () => {\n          Tracker.autorun(c => {\n            // this is just a test to make sure we've a stop function\n            c.stop();\n            done();\n          });\n        });\n      });\n    });\n\n    context('without a SSR Context', () => {\n      it('should call the original Tracker.autorun', done => {\n        const someVar = new ReactiveVar();\n        let runCount = 0;\n\n        const c = Tracker.autorun(() => {\n          someVar.get();\n          runCount++;\n        });\n\n        someVar.set(200);\n        Meteor.setTimeout(() => {\n          expect(runCount).to.be.equal(2);\n          c.stop();\n          done();\n        }, 200);\n      });\n    });\n  });\n});\n"]},"hash":"03c735bdcf1f5e8d9d77d6a55a468ba52e916aad"}
