{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/router.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/router.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/router.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/router.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"router"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nRouter = function (_SharedRouter) {\n  (0, _inherits3[\"default\"])(Router, _SharedRouter);\n\n  function Router() {\n    (0, _classCallCheck3[\"default\"])(this, Router);\n\n    var _this = (0, _possibleConstructorReturn3[\"default\"])(this, _SharedRouter.call(this));\n\n    _this.subscriptions = Function.prototype;\n    _this.ssrContext = new Meteor.EnvironmentVariable();\n    _this.inSubscription = new Meteor.EnvironmentVariable();\n    _this.routeContext = new Meteor.EnvironmentVariable();\n\n    // FlowRouter can defer the script loading after rendered the body\n    // It's turned off by default\n    _this.deferScriptLoading = false;\n\n    // FlowRouter can cache it's pages to improve SSR performance.\n    // It's turned off by default\n    _this.pageCacheTimeout = 0;\n\n    // holds onRoute callbacks\n    _this._onRouteCallbacks = [];\n\n    _this.triggers = {\n      enter: function () {\n        function enter() {\n          // client only\n        }\n\n        return enter;\n      }(),\n      exit: function () {\n        function exit() {\n          // client only\n        }\n\n        return exit;\n      }()\n    };\n    return _this;\n  }\n\n  Router.prototype.getParam = function () {\n    function getParam(key) {\n      var current = this.current();\n      if (current) {\n        return current.params[key];\n      }\n    }\n\n    return getParam;\n  }();\n\n  Router.prototype.getQueryParam = function () {\n    function getQueryParam(key) {\n      var current = this.current();\n      if (current) {\n        return current.queryParams[key];\n      }\n    }\n\n    return getQueryParam;\n  }();\n\n  Router.prototype.getRouteName = function () {\n    function getRouteName() {\n      var current = this.current();\n      if (current) {\n        return current.route.name;\n      }\n    }\n\n    return getRouteName;\n  }();\n\n  Router.prototype.setDeferScriptLoading = function () {\n    function setDeferScriptLoading(defer) {\n      this.deferScriptLoading = defer;\n    }\n\n    return setDeferScriptLoading;\n  }();\n\n  Router.prototype.setPageCacheTimeout = function () {\n    function setPageCacheTimeout(timeout) {\n      this.pageCacheTimeout = timeout;\n    }\n\n    return setPageCacheTimeout;\n  }();\n\n  Router.prototype._getCurrentRouteContext = function () {\n    function _getCurrentRouteContext() {\n      return this.routeContext.get();\n    }\n\n    return _getCurrentRouteContext;\n  }();\n\n  return Router;\n}(SharedRouter);","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/router.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;AACE,oBAAc;;;kEACZ,0BADY;;AAGZ,UAAK,aAAL,GAAqB,SAAS,SAAT,CAHT;AAIZ,UAAK,UAAL,GAAkB,IAAI,OAAO,mBAAP,EAAtB,CAJY;AAKZ,UAAK,cAAL,GAAsB,IAAI,OAAO,mBAAP,EAA1B,CALY;AAMZ,UAAK,YAAL,GAAoB,IAAI,OAAO,mBAAP,EAAxB;;;;AANY,SAUZ,CAAK,kBAAL,GAA0B,KAA1B;;;;AAVY,SAcZ,CAAK,gBAAL,GAAwB,CAAxB;;;AAdY,SAiBZ,CAAK,iBAAL,GAAyB,EAAzB,CAjBY;;AAmBZ,UAAK,QAAL,GAAgB;AACd;AAAO,yBAAW;;SAAX;;;SAAP;AAGA;AAAM,wBAAW;;SAAX;;;SAAN;KAJF,CAnBY;;GAAd;;mBA6BA;sBAAS,KAAK;AACZ,UAAM,UAAU,KAAK,OAAL,EAAV,CADM;AAEZ,UAAI,OAAJ,EAAa;AACX,eAAO,QAAQ,MAAR,CAAe,GAAf,CAAP,CADW;OAAb;;;;;;mBAKF;2BAAc,KAAK;AACjB,UAAM,UAAU,KAAK,OAAL,EAAV,CADW;AAEjB,UAAI,OAAJ,EAAa;AACX,eAAO,QAAQ,WAAR,CAAoB,GAApB,CAAP,CADW;OAAb;;;;;;mBAKF;4BAAe;AACb,UAAM,UAAU,KAAK,OAAL,EAAV,CADO;AAEb,UAAI,OAAJ,EAAa;AACX,eAAO,QAAQ,KAAR,CAAc,IAAd,CADI;OAAb;;;;;;mBAKF;mCAAsB,OAAO;AAC3B,WAAK,kBAAL,GAA0B,KAA1B,CAD2B;;;;;;mBAI7B;iCAAoB,SAAS;AAC3B,WAAK,gBAAL,GAAwB,OAAxB,CAD2B;;;;;;mBAI7B;uCAA0B;AACxB,aAAO,KAAK,YAAL,CAAkB,GAAlB,EAAP,CADwB;;;;;;;EA3DL,aAAvB","file":"/packages/kadira:flow-router-ssr/server/router.js.map","sourcesContent":["Router = class extends SharedRouter {\n  constructor() {\n    super();\n\n    this.subscriptions = Function.prototype;\n    this.ssrContext = new Meteor.EnvironmentVariable();\n    this.inSubscription = new Meteor.EnvironmentVariable();\n    this.routeContext = new Meteor.EnvironmentVariable();\n\n    // FlowRouter can defer the script loading after rendered the body\n    // It's turned off by default\n    this.deferScriptLoading = false;\n\n    // FlowRouter can cache it's pages to improve SSR performance.\n    // It's turned off by default\n    this.pageCacheTimeout = 0;\n\n    // holds onRoute callbacks\n    this._onRouteCallbacks = [];\n\n    this.triggers = {\n      enter: function() {\n        // client only\n      },\n      exit: function() {\n        // client only\n      }\n    };\n  }\n\n  getParam(key) {\n    const current = this.current();\n    if (current) {\n      return current.params[key];\n    }\n  }\n\n  getQueryParam(key) {\n    const current = this.current();\n    if (current) {\n      return current.queryParams[key];\n    }\n  }\n\n  getRouteName() {\n    const current = this.current();\n    if (current) {\n      return current.route.name;\n    }\n  }\n\n  setDeferScriptLoading(defer) {\n    this.deferScriptLoading = defer;\n  }\n\n  setPageCacheTimeout(timeout) {\n    this.pageCacheTimeout = timeout;\n  }\n\n  _getCurrentRouteContext() {\n    return this.routeContext.get();\n  }\n};\n"]},"hash":"ae11de1d919b6058448eb4841670a04c3bf8c85d"}
