{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ssr_data"},"ignored":false,"code":"var _this = this;\n\nvar originalSubscribe = Meteor.subscribe;\n\nMeteor.subscribe = function (pubName) {\n  var params = Array.prototype.slice.call(arguments, 1);\n\n  var ssrContext = FlowRouter.ssrContext.get();\n  if (ssrContext) {\n    FlowRouter.inSubscription.withValue(true, function () {\n      ssrContext.addSubscription(pubName, params);\n    });\n  }\n\n  if (originalSubscribe) {\n    originalSubscribe.apply(this, arguments);\n  }\n\n  return {\n    ready: function () {\n      function ready() {\n        return true;\n      }\n\n      return ready;\n    }()\n  };\n};\n\nvar Mongo = Package.mongo.Mongo;\nvar originalFind = Mongo.Collection.prototype.find;\n\nMongo.Collection.prototype.find = function (selector, options) {\n  selector = selector || {};\n  var ssrContext = FlowRouter.ssrContext.get();\n  if (ssrContext && !FlowRouter.inSubscription.get()) {\n    var collName = this._name;\n    var collection = ssrContext.getCollection(collName);\n    var cursor = collection.find(selector, options);\n    return cursor;\n  }\n\n  return originalFind.call(this, selector, options);\n};\n\n// We must implement this. Otherwise, it'll call the origin prototype's\n// find method\nMongo.Collection.prototype.findOne = function (selector, options) {\n  options = options || {};\n  options.limit = 1;\n  return this.find(selector, options).fetch()[0];\n};\n\nvar originalAutorun = Tracker.autorun;\n\nTracker.autorun = function (fn) {\n  // if autorun is in the ssrContext, we need fake and run the callback\n  // in the same eventloop\n  if (FlowRouter.ssrContext.get()) {\n    var c = { firstRun: true, stop: function () {\n        function stop() {}\n\n        return stop;\n      }() };\n    fn(c);\n    return c;\n  }\n\n  return originalAutorun.call(Tracker, fn);\n};\n\n// By default, Meteor[call,apply] also inherit SsrContext\n// So, they can't access the full MongoDB dataset because of that\n// Then, we need to remove the SsrContext within Method calls\n['call', 'apply'].forEach(function (methodName) {\n  var original = Meteor[methodName];\n  Meteor[methodName] = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var response = FlowRouter.ssrContext.withValue(null, function () {\n      return original.apply(_this, args);\n    });\n\n    return response;\n  };\n});\n\n// This is not available in the server. But to make it work with SSR\n// We need to have it.\nMeteor.loggingIn = function () {\n  return false;\n};","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js"],"names":[],"mappings":";;AAAA,IAAM,oBAAoB,OAAO,SAAP;;AAE1B,OAAO,SAAP,GAAmB,UAAS,OAAT,EAAkB;AACnC,MAAM,SAAS,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAT,CAD6B;;AAGnC,MAAM,aAAa,WAAW,UAAX,CAAsB,GAAtB,EAAb,CAH6B;AAInC,MAAI,UAAJ,EAAgB;AACd,eAAW,cAAX,CAA0B,SAA1B,CAAoC,IAApC,EAA0C,YAAM;AAC9C,iBAAW,eAAX,CAA2B,OAA3B,EAAoC,MAApC,EAD8C;KAAN,CAA1C,CADc;GAAhB;;AAMA,MAAI,iBAAJ,EAAuB;AACrB,sBAAkB,KAAlB,CAAwB,IAAxB,EAA8B,SAA9B,EADqB;GAAvB;;AAIA,SAAO;AACL;AAAO;eAAM;OAAN;;;OAAP;GADF,CAdmC;CAAlB;;AAmBnB,IAAM,QAAQ,QAAQ,KAAR,CAAc,KAAd;AACd,IAAM,eAAe,MAAM,UAAN,CAAiB,SAAjB,CAA2B,IAA3B;;AAErB,MAAM,UAAN,CAAiB,SAAjB,CAA2B,IAA3B,GAAkC,UAAS,QAAT,EAAmB,OAAnB,EAA4B;AAC5D,aAAW,YAAY,EAAZ,CADiD;AAE5D,MAAM,aAAa,WAAW,UAAX,CAAsB,GAAtB,EAAb,CAFsD;AAG5D,MAAI,cAAc,CAAC,WAAW,cAAX,CAA0B,GAA1B,EAAD,EAAkC;AAClD,QAAM,WAAW,KAAK,KAAL,CADiC;AAElD,QAAM,aAAa,WAAW,aAAX,CAAyB,QAAzB,CAAb,CAF4C;AAGlD,QAAM,SAAS,WAAW,IAAX,CAAgB,QAAhB,EAA0B,OAA1B,CAAT,CAH4C;AAIlD,WAAO,MAAP,CAJkD;GAApD;;AAOA,SAAO,aAAa,IAAb,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC,OAAlC,CAAP,CAV4D;CAA5B;;;;AAelC,MAAM,UAAN,CAAiB,SAAjB,CAA2B,OAA3B,GAAqC,UAAS,QAAT,EAAmB,OAAnB,EAA4B;AAC/D,YAAU,WAAW,EAAX,CADqD;AAE/D,UAAQ,KAAR,GAAgB,CAAhB,CAF+D;AAG/D,SAAO,KAAK,IAAL,CAAU,QAAV,EAAoB,OAApB,EAA6B,KAA7B,GAAqC,CAArC,CAAP,CAH+D;CAA5B;;AAMrC,IAAM,kBAAkB,QAAQ,OAAR;;AAExB,QAAQ,OAAR,GAAkB,UAAC,EAAD,EAAQ;;;AAGxB,MAAI,WAAW,UAAX,CAAsB,GAAtB,EAAJ,EAAiC;AAC/B,QAAM,IAAI,EAAE,UAAU,IAAV,EAAgB;AAAM,wBAAM,EAAN;;;SAAN,EAAtB,CADyB;AAE/B,OAAG,CAAH,EAF+B;AAG/B,WAAO,CAAP,CAH+B;GAAjC;;AAMA,SAAO,gBAAgB,IAAhB,CAAqB,OAArB,EAA8B,EAA9B,CAAP,CATwB;CAAR;;;;;AAelB,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAA0B,UAAC,UAAD,EAAgB;AACxC,MAAM,WAAW,OAAO,UAAP,CAAX,CADkC;AAExC,SAAO,UAAP,IAAqB,YAAa;sCAAT;;KAAS;;AAChC,QAAM,WAAW,WAAW,UAAX,CAAsB,SAAtB,CAAgC,IAAhC,EAAsC,YAAM;AAC3D,aAAO,SAAS,KAAT,QAAqB,IAArB,CAAP,CAD2D;KAAN,CAAjD,CAD0B;;AAKhC,WAAO,QAAP,CALgC;GAAb,CAFmB;CAAhB,CAA1B;;;;AAaA,OAAO,SAAP,GAAmB,YAAM;AACvB,SAAO,KAAP,CADuB;CAAN","file":"/packages/kadira:flow-router-ssr/server/plugins/ssr_data.js.map","sourcesContent":["const originalSubscribe = Meteor.subscribe;\n\nMeteor.subscribe = function(pubName) {\n  const params = Array.prototype.slice.call(arguments, 1);\n\n  const ssrContext = FlowRouter.ssrContext.get();\n  if (ssrContext) {\n    FlowRouter.inSubscription.withValue(true, () => {\n      ssrContext.addSubscription(pubName, params);\n    });\n  }\n\n  if (originalSubscribe) {\n    originalSubscribe.apply(this, arguments);\n  }\n\n  return {\n    ready: () => true\n  };\n};\n\nconst Mongo = Package.mongo.Mongo;\nconst originalFind = Mongo.Collection.prototype.find;\n\nMongo.Collection.prototype.find = function(selector, options) {\n  selector = selector || {};\n  const ssrContext = FlowRouter.ssrContext.get();\n  if (ssrContext && !FlowRouter.inSubscription.get()) {\n    const collName = this._name;\n    const collection = ssrContext.getCollection(collName);\n    const cursor = collection.find(selector, options);\n    return cursor;\n  }\n\n  return originalFind.call(this, selector, options);\n};\n\n// We must implement this. Otherwise, it'll call the origin prototype's\n// find method\nMongo.Collection.prototype.findOne = function(selector, options) {\n  options = options || {};\n  options.limit = 1;\n  return this.find(selector, options).fetch()[0];\n};\n\nconst originalAutorun = Tracker.autorun;\n\nTracker.autorun = (fn) => {\n  // if autorun is in the ssrContext, we need fake and run the callback\n  // in the same eventloop\n  if (FlowRouter.ssrContext.get()) {\n    const c = { firstRun: true, stop: () => {} };\n    fn(c);\n    return c;\n  }\n\n  return originalAutorun.call(Tracker, fn);\n};\n\n// By default, Meteor[call,apply] also inherit SsrContext\n// So, they can't access the full MongoDB dataset because of that\n// Then, we need to remove the SsrContext within Method calls\n['call', 'apply'].forEach((methodName) => {\n  const original = Meteor[methodName];\n  Meteor[methodName] = (...args) => {\n    const response = FlowRouter.ssrContext.withValue(null, () => {\n      return original.apply(this, args);\n    });\n\n    return response;\n  };\n});\n\n// This is not available in the server. But to make it work with SSR\n// We need to have it.\nMeteor.loggingIn = () => {\n  return false;\n};\n"]},"hash":"659d7ca4ad636b71f7f7b0b40d0c37f8cc3982ed"}
