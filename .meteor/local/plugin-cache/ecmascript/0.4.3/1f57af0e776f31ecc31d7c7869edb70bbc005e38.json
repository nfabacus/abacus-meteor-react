{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ssr_context"},"ignored":false,"code":"describe('SSR Context', function () {\n  context('getCollection', function () {\n    it('should create a collection if there is not', function () {\n      var ssrContext = new SsrContext();\n      var collection = ssrContext.getCollection('collName');\n      expect(collection).to.be.ok;\n    });\n\n    it('should return the collection already created if exists', function () {\n      var ssrContext = new SsrContext();\n      var collection1 = ssrContext.getCollection('collName1');\n      var collection2 = ssrContext.getCollection('collName1');\n\n      expect(collection1).to.be.deep.equal(collection2);\n    });\n  });\n\n  context('body', function () {\n    it('should add and get body', function () {\n      var ssrContext = new SsrContext();\n\n      var html1 = '<p>Sample <em>Html</em> Strings</p>';\n      ssrContext.setHtml(html1);\n      var html2 = ssrContext.getHtml();\n\n      expect(html1).to.be.equal(html2);\n    });\n\n    it('should override existing body', function () {\n      var ssrContext = new SsrContext();\n\n      var body = '<p>Sample <em>Html</em> Strings</p>';\n      ssrContext.setHtml(body);\n      var existingBody = ssrContext.getHtml();\n      expect(body).to.be.equal(existingBody);\n\n      var bodyToOverride = '<div>Demo HTML Content</div>';\n      ssrContext.setHtml(bodyToOverride);\n      existingBody = ssrContext.getHtml();\n      expect(bodyToOverride).to.be.equal(existingBody);\n    });\n  });\n\n  context('head', function () {\n    it('should get the existing head', function () {\n      var ssrContext = new SsrContext();\n\n      var headHtml = '<h1>Head</h1>';\n      ssrContext.addToHead(headHtml);\n      var existingHead = ssrContext.getHead();\n      var expectedHead = '\\n' + headHtml;\n\n      expect(expectedHead).to.be.equal(existingHead);\n    });\n\n    it('should append to the existing head', function () {\n      var ssrContext = new SsrContext();\n\n      var headHtml = '<h1>Head</h1>';\n      ssrContext.addToHead(headHtml);\n      var existingHead = ssrContext.getHead();\n      var expectedHead = '\\n' + headHtml;\n\n      expect(expectedHead).to.be.equal(existingHead);\n\n      var headHtmlToAppend = '<h2>Head 2</h2>';\n      ssrContext.addToHead(headHtmlToAppend);\n      existingHead = ssrContext.getHead();\n      expectedHead += '\\n' + headHtmlToAppend;\n\n      expect(expectedHead).to.be.equal(existingHead);\n    });\n  });\n\n  context('addData', function () {\n    context('for each data chunk', function () {\n      it('should insert to the collection if there no existing item', function () {\n        var ssrContext = new SsrContext();\n        var collName = Random.id();\n        var collection = ssrContext.getCollection(collName);\n        expect(collection.find().count()).to.be.equal(0);\n\n        var data = {};\n        data[collName] = [[{ _id: '1', aa: 10 }, { _id: '2', aa: 20 }]];\n        ssrContext.addData(data);\n        expect(collection.find().fetch()).to.be.deep.equal(data[collName][0]);\n      });\n\n      it('should deepMerge and update if there is an item', function () {\n        var ssrContext = new SsrContext();\n        var collName = Random.id();\n        var collection = ssrContext.getCollection(collName);\n        collection.insert({ _id: '1', aa: 10, bb: { cc: 10 } });\n        expect(collection.find().count()).to.be.equal(1);\n\n        var data = {};\n        data[collName] = [[{ _id: '1', aa: 20, bb: { dd: 30 } }]];\n        ssrContext.addData(data);\n        var expectedDoc = {\n          _id: '1',\n          aa: 20,\n          bb: { cc: 10, dd: 30 }\n        };\n        expect(collection.find().fetch()).to.be.deep.equal([expectedDoc]);\n      });\n    });\n  });\n\n  context('addSubscription', function () {\n    context('without a FastRender context', function () {\n      it('should throw an error', function () {\n        var ssrContext = new SsrContext();\n        expect(function () {\n          return ssrContext.addSubscription('abc');\n        }).to['throw'](/Cannot add a subscription/);\n      });\n    });\n\n    context('with a FastRender context', function () {\n      it('should fetch data from the fastRender context and add it', function (done) {\n        var ssrContext = new SsrContext();\n        var data = [[{ _id: 'aa' }]];\n        var frContext = {\n          subscribe: function () {\n            function subscribe(name, p1, p2) {\n              expect(name).to.be.equal('mysub');\n              expect([p1, p2]).to.be.deep.equal(['one', 'two']);\n              return data;\n            }\n\n            return subscribe;\n          }()\n        };\n\n        ssrContext.addData = function (_data) {\n          expect(_data).to.be.deep.equal(data);\n          done();\n        };\n\n        FastRender.frContext.withValue(frContext, function () {\n          ssrContext.addSubscription('mysub', ['one', 'two']);\n        });\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js"],"names":[],"mappings":"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","file":"/packages/kadira:flow-router-ssr/server/__tests__/ssr_context.js.map","sourcesContent":["describe('SSR Context', () => {\n  context('getCollection', () => {\n    it('should create a collection if there is not', () => {\n      const ssrContext = new SsrContext();\n      const collection = ssrContext.getCollection('collName');\n      expect(collection).to.be.ok;\n    });\n\n    it('should return the collection already created if exists', () => {\n      const ssrContext = new SsrContext();\n      const collection1 = ssrContext.getCollection('collName1');\n      const collection2 = ssrContext.getCollection('collName1');\n\n      expect(collection1).to.be.deep.equal(collection2);\n    });\n  });\n\n  context('body', () => {\n    it('should add and get body', () => {\n      const ssrContext = new SsrContext();\n\n      const html1 = '<p>Sample <em>Html</em> Strings</p>';\n      ssrContext.setHtml(html1);\n      const html2 = ssrContext.getHtml();\n\n      expect(html1).to.be.equal(html2);\n    });\n\n    it('should override existing body', () => {\n      const ssrContext = new SsrContext();\n\n      const body = '<p>Sample <em>Html</em> Strings</p>';\n      ssrContext.setHtml(body);\n      let existingBody = ssrContext.getHtml();\n      expect(body).to.be.equal(existingBody);\n\n      const bodyToOverride = '<div>Demo HTML Content</div>';\n      ssrContext.setHtml(bodyToOverride);\n      existingBody = ssrContext.getHtml();\n      expect(bodyToOverride).to.be.equal(existingBody);\n    });\n  });\n\n  context('head', () => {\n    it('should get the existing head', () => {\n      const ssrContext = new SsrContext();\n\n      const headHtml = '<h1>Head</h1>';\n      ssrContext.addToHead(headHtml);\n      const existingHead = ssrContext.getHead();\n      const expectedHead = `\\n${headHtml}`;\n\n      expect(expectedHead).to.be.equal(existingHead);\n    });\n\n    it('should append to the existing head', () => {\n      const ssrContext = new SsrContext();\n\n      const headHtml = '<h1>Head</h1>';\n      ssrContext.addToHead(headHtml);\n      let existingHead = ssrContext.getHead();\n      let expectedHead = `\\n${headHtml}`;\n\n      expect(expectedHead).to.be.equal(existingHead);\n\n      const headHtmlToAppend = '<h2>Head 2</h2>';\n      ssrContext.addToHead(headHtmlToAppend);\n      existingHead = ssrContext.getHead();\n      expectedHead += `\\n${headHtmlToAppend}`;\n\n      expect(expectedHead).to.be.equal(existingHead);\n    });\n  });\n\n  context('addData', () => {\n    context('for each data chunk', () => {\n      it('should insert to the collection if there no existing item', () => {\n        const ssrContext = new SsrContext();\n        const collName = Random.id();\n        const collection = ssrContext.getCollection(collName);\n        expect(collection.find().count()).to.be.equal(0);\n\n        const data = {};\n        data[collName] = [\n          [{_id: '1', aa: 10}, {_id: '2', aa: 20}]\n        ];\n        ssrContext.addData(data);\n        expect(collection.find().fetch()).to.be.deep.equal(data[collName][0]);\n      });\n\n      it('should deepMerge and update if there is an item', () => {\n        const ssrContext = new SsrContext();\n        const collName = Random.id();\n        const collection = ssrContext.getCollection(collName);\n        collection.insert({_id: '1', aa: 10, bb: {cc: 10}});\n        expect(collection.find().count()).to.be.equal(1);\n\n        const data = {};\n        data[collName] = [\n          [{_id: '1', aa: 20, bb: {dd: 30}}]\n        ];\n        ssrContext.addData(data);\n        const expectedDoc = {\n          _id: '1',\n          aa: 20,\n          bb: {cc: 10, dd: 30}\n        };\n        expect(collection.find().fetch()).to.be.deep.equal([expectedDoc]);\n      });\n    });\n  });\n\n  context('addSubscription', () => {\n    context('without a FastRender context', () => {\n      it('should throw an error', () => {\n        const ssrContext = new SsrContext();\n        expect(() => ssrContext.addSubscription('abc')).to.throw(/Cannot add a subscription/);\n      });\n    });\n\n    context('with a FastRender context', () => {\n      it('should fetch data from the fastRender context and add it', (done) => {\n        const ssrContext = new SsrContext();\n        const data = [[{_id: 'aa'}]];\n        const frContext = {\n          subscribe: (name, p1, p2) => {\n            expect(name).to.be.equal('mysub');\n            expect([p1, p2]).to.be.deep.equal(['one', 'two']);\n            return data;\n          }\n        };\n\n        ssrContext.addData = _data => {\n          expect(_data).to.be.deep.equal(data);\n          done();\n        };\n\n        FastRender.frContext.withValue(frContext, () => {\n          ssrContext.addSubscription('mysub', ['one', 'two']);\n        });\n      });\n    });\n  });\n});\n"]},"hash":"1f57af0e776f31ecc31d7c7869edb70bbc005e38"}
