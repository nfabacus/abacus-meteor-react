{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/test/server/_helpers.js","filenameRelative":"/packages/kadira:flow-router-ssr/test/server/_helpers.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/test/server/_helpers.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/test/server/_helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"_helpers"},"ignored":false,"code":"Meteor.publish('foo', function () {\n  this.ready();\n});\n\nMeteor.publish('fooNotReady', function () {});\n\nMeteor.publish('bar', function () {\n  this.ready();\n});\n\n// use this only to test global subs\nMeteor.publish('baz', function () {\n  this.ready();\n});\n\nMeteor.publish('bazNotReady', function () {});\n\nMeteor.publish('readyness', function (doIt) {\n  if (doIt) {\n    this.ready();\n  }\n});\n\nInjectData = Package['meteorhacks:inject-data'].InjectData;\nvar urlResolve = Npm.require('url').resolve;\nGetFRData = function () {\n  function GetFRData(path) {\n    var url = urlResolve(process.env.ROOT_URL, path);\n    // FastRender only servers if there is a accept header with html in it\n    var options = {\n      headers: { 'accept': 'html' }\n    };\n    var res = HTTP.get(url, options);\n\n    var encodedData = res.content.match(/data\">(.*)<\\/script/)[1];\n    return InjectData._decode(encodedData)['fast-render-data'];\n  }\n\n  return GetFRData;\n}();","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/test/server/_helpers.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,OAAK,KAAL,GAD+B;CAAX,CAAtB;;AAIA,OAAO,OAAP,CAAe,aAAf,EAA8B,YAAW,EAAX,CAA9B;;AAGA,OAAO,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,OAAK,KAAL,GAD+B;CAAX,CAAtB;;;AAKA,OAAO,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,OAAK,KAAL,GAD+B;CAAX,CAAtB;;AAIA,OAAO,OAAP,CAAe,aAAf,EAA8B,YAAW,EAAX,CAA9B;;AAGA,OAAO,OAAP,CAAe,WAAf,EAA4B,UAAS,IAAT,EAAe;AACzC,MAAI,IAAJ,EAAU;AACR,SAAK,KAAL,GADQ;GAAV;CAD0B,CAA5B;;AAMA,aAAa,QAAQ,yBAAR,EAAmC,UAAnC;AACb,IAAI,aAAa,IAAI,OAAJ,CAAY,KAAZ,EAAmB,OAAnB;AACjB;AAAY,WAAS,SAAT,CAAmB,IAAnB,EAAyB;AACnC,QAAI,MAAM,WAAW,QAAQ,GAAR,CAAY,QAAZ,EAAsB,IAAjC,CAAN;;AAD+B,QAG/B,UAAU;AACZ,eAAS,EAAC,UAAU,MAAV,EAAV;KADE,CAH+B;AAMnC,QAAI,MAAM,KAAK,GAAL,CAAS,GAAT,EAAc,OAAd,CAAN,CAN+B;;AAQnC,QAAI,cAAc,IAAI,OAAJ,CAAY,KAAZ,CAAkB,qBAAlB,EAAyC,CAAzC,CAAd,CAR+B;AASnC,WAAO,WAAW,OAAX,CAAmB,WAAnB,EAAgC,kBAAhC,CAAP,CATmC;GAAzB;;SAAS;GAArB","file":"/packages/kadira:flow-router-ssr/test/server/_helpers.js.map","sourcesContent":["Meteor.publish('foo', function() {\n  this.ready();\n});\n\nMeteor.publish('fooNotReady', function() {\n});\n\nMeteor.publish('bar', function() {\n  this.ready();\n});\n\n// use this only to test global subs\nMeteor.publish('baz', function() {\n  this.ready();\n});\n\nMeteor.publish('bazNotReady', function() {\n});\n\nMeteor.publish('readyness', function(doIt) {\n  if (doIt) {\n    this.ready();\n  }\n});\n\nInjectData = Package['meteorhacks:inject-data'].InjectData;\nvar urlResolve = Npm.require('url').resolve;\nGetFRData = function GetFRData(path) {\n  var url = urlResolve(process.env.ROOT_URL, path);\n  // FastRender only servers if there is a accept header with html in it\n  var options = {\n    headers: {'accept': 'html'}\n  };\n  var res = HTTP.get(url, options);\n\n  var encodedData = res.content.match(/data\">(.*)<\\/script/)[1];\n  return InjectData._decode(encodedData)['fast-render-data'];\n}\n"]},"hash":"45a554918aac440167cfb22c931dabd4c681d32c"}
