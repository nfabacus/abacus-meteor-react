{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/lib/__tests__/group.js","filenameRelative":"/packages/kadira:flow-router-ssr/lib/__tests__/group.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/lib/__tests__/group.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/lib/__tests__/group.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"group"},"ignored":false,"code":"describe('Group', function () {\n  var router = new Router();\n  context('class', function () {\n    it('should be an extension of the SharedGroup', function () {\n      var newGroup = new Group(router);\n      expect(newGroup).to.be.an['instanceof'](Group);\n      expect(newGroup).to.be.an['instanceof'](SharedGroup);\n    });\n  });\n\n  context('functionalities', function () {\n    it('should set and retrieve group name', function () {\n      var rand = Random.id();\n      var name = Random.id();\n      var newGroup = new Group(router, { name: name });\n\n      if (Meteor.isClient) {\n        newGroup.route('/' + rand);\n        router.go('/' + rand);\n        expect(router.current().route.group.name).to.be.equal(name);\n      }\n    });\n\n    context('define and go to route', function () {\n      var prefix = Random.id();\n      var rand = Random.id();\n\n      it('should work with prefix', function () {\n        var newGroup = new Group(router, { prefix: '/' + prefix });\n        var rendered = 0;\n\n        newGroup.route('/' + rand, {\n          action: function () {\n            function action() {\n              rendered++;\n            }\n\n            return action;\n          }()\n        });\n\n        if (Meteor.isClient) {\n          router.go('/' + prefix + '/' + rand);\n          expect(rendered).to.be.equal(1);\n        }\n      });\n\n      it('should work without prefix', function () {\n        var newGroup = new Group(router);\n        var rendered = 0;\n\n        newGroup.route('/' + rand, {\n          action: function () {\n            function action() {\n              rendered++;\n            }\n\n            return action;\n          }()\n        });\n\n        if (Meteor.isClient) {\n          router.go('/' + rand);\n          expect(rendered).to.be.equal(1);\n        }\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/lib/__tests__/group.js"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,YAAM;AACtB,MAAM,SAAS,IAAI,MAAJ,EAAT,CADgB;AAEtB,UAAQ,OAAR,EAAiB,YAAM;AACrB,OAAG,2CAAH,EAAgD,YAAM;AACpD,UAAM,WAAW,IAAI,KAAJ,CAAU,MAAV,CAAX,CAD8C;AAEpD,aAAO,QAAP,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,EAAvB,eAAqC,KAArC,EAFoD;AAGpD,aAAO,QAAP,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,EAAvB,eAAqC,WAArC,EAHoD;KAAN,CAAhD,CADqB;GAAN,CAAjB,CAFsB;;AAUtB,UAAQ,iBAAR,EAA2B,YAAM;AAC/B,OAAG,oCAAH,EAAyC,YAAM;AAC7C,UAAM,OAAO,OAAO,EAAP,EAAP,CADuC;AAE7C,UAAM,OAAO,OAAO,EAAP,EAAP,CAFuC;AAG7C,UAAM,WAAW,IAAI,KAAJ,CAAU,MAAV,EAAkB,EAAC,UAAD,EAAlB,CAAX,CAHuC;;AAK7C,UAAI,OAAO,QAAP,EAAiB;AACnB,iBAAS,KAAT,OAAmB,IAAnB,EADmB;AAEnB,eAAO,EAAP,OAAc,IAAd,EAFmB;AAGnB,eAAO,OAAO,OAAP,GAAiB,KAAjB,CAAuB,KAAvB,CAA6B,IAA7B,CAAP,CAA0C,EAA1C,CAA6C,EAA7C,CAAgD,KAAhD,CAAsD,IAAtD,EAHmB;OAArB;KALuC,CAAzC,CAD+B;;AAa/B,YAAQ,wBAAR,EAAkC,YAAM;AACtC,UAAM,SAAS,OAAO,EAAP,EAAT,CADgC;AAEtC,UAAM,OAAO,OAAO,EAAP,EAAP,CAFgC;;AAItC,SAAG,yBAAH,EAA8B,YAAM;AAClC,YAAM,WAAW,IAAI,KAAJ,CAAU,MAAV,EAAkB,EAAC,cAAY,MAAZ,EAAnB,CAAX,CAD4B;AAElC,YAAI,WAAW,CAAX,CAF8B;;AAIlC,iBAAS,KAAT,OAAmB,IAAnB,EAA2B;AACzB;8BAAS;AACP,yBADO;;;;aADgB;SAA3B,EAJkC;;AAUlC,YAAI,OAAO,QAAP,EAAiB;AACnB,iBAAO,EAAP,OAAc,eAAU,IAAxB,EADmB;AAEnB,iBAAO,QAAP,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,CAA7B,EAFmB;SAArB;OAV4B,CAA9B,CAJsC;;AAoBtC,SAAG,4BAAH,EAAiC,YAAM;AACrC,YAAM,WAAW,IAAI,KAAJ,CAAU,MAAV,CAAX,CAD+B;AAErC,YAAI,WAAW,CAAX,CAFiC;;AAIrC,iBAAS,KAAT,OAAmB,IAAnB,EAA2B;AACzB;8BAAS;AACP,yBADO;;;;aADgB;SAA3B,EAJqC;;AAUrC,YAAI,OAAO,QAAP,EAAiB;AACnB,iBAAO,EAAP,OAAc,IAAd,EADmB;AAEnB,iBAAO,QAAP,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,CAA7B,EAFmB;SAArB;OAV+B,CAAjC,CApBsC;KAAN,CAAlC,CAb+B;GAAN,CAA3B,CAVsB;CAAN,CAAlB","file":"/packages/kadira:flow-router-ssr/lib/__tests__/group.js.map","sourcesContent":["describe('Group', () => {\n  const router = new Router();\n  context('class', () => {\n    it('should be an extension of the SharedGroup', () => {\n      const newGroup = new Group(router);\n      expect(newGroup).to.be.an.instanceof(Group);\n      expect(newGroup).to.be.an.instanceof(SharedGroup);\n    });\n  });\n\n  context('functionalities', () => {\n    it('should set and retrieve group name', () => {\n      const rand = Random.id();\n      const name = Random.id();\n      const newGroup = new Group(router, {name});\n\n      if (Meteor.isClient) {\n        newGroup.route(`/${rand}`);\n        router.go(`/${rand}`);\n        expect(router.current().route.group.name).to.be.equal(name);\n      }\n    });\n\n    context('define and go to route', () => {\n      const prefix = Random.id();\n      const rand = Random.id();\n\n      it('should work with prefix', () => {\n        const newGroup = new Group(router, {prefix: `/${prefix}`});\n        let rendered = 0;\n\n        newGroup.route(`/${rand}`, {\n          action() {\n            rendered++;\n          }\n        });\n\n        if (Meteor.isClient) {\n          router.go(`/${prefix}/${rand}`);\n          expect(rendered).to.be.equal(1);\n        }\n      });\n\n      it('should work without prefix', () => {\n        const newGroup = new Group(router);\n        let rendered = 0;\n\n        newGroup.route(`/${rand}`, {\n          action() {\n            rendered++;\n          }\n        });\n\n        if (Meteor.isClient) {\n          router.go(`/${rand}`);\n          expect(rendered).to.be.equal(1);\n        }\n      });\n    });\n  });\n});\n"]},"hash":"b32ceb91161d5b19b053e55308be8be2493d4e9f"}
