{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:flow-router-ssr/server/__tests__/route.js","filenameRelative":"/packages/kadira:flow-router-ssr/server/__tests__/route.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:flow-router-ssr/server/__tests__/route.js.map","sourceFileName":"/packages/kadira:flow-router-ssr/server/__tests__/route.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"route"},"ignored":false,"code":"var minifyHtml = function minifyHtml(str) {\n  return str.split('\\n').map(function (line) {\n    return line.trim();\n  }).join('');\n};\n\ndescribe('Route', function () {\n  context('page Caching', function () {\n    context('new page', function () {\n      it('should be able to cache the page and get it back', function () {\n        var route = new Route();\n        var pageInfo = { aa: 10 };\n        var userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        expect(route._getCachedPage('/the-url', userId)).to.be.deep.equal(pageInfo);\n      });\n\n      it('should expire the page after a timeout', function () {\n        var route = new Route();\n        var pageInfo = { aa: 10 };\n        var userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        Meteor._sleepForMs(200);\n        expect(route._getCachedPage('/the-url', userId)).to.be['null'];\n      });\n    });\n\n    context('exiting page', function () {\n      it('should throw an error when trying to cache again', function () {\n        var route = new Route();\n        var pageInfo = { aa: 10 };\n        var userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        // doing it for the second time.\n        route._cachePage('/the-url', userId, { aa: 2323 }, 100);\n\n        var cachedPage = route._getCachedPage('/the-url', userId);\n        expect(cachedPage).to.be.deep.equal(pageInfo);\n      });\n    });\n  });\n\n  context('._isHtmlPage', function () {\n    context('no extention', function () {\n      context('should be true', function () {\n        var route = new Route();\n        var isHtml = route._isHtmlPage('/anc/sds');\n        expect(isHtml).to.be['true'];\n      });\n    });\n\n    context('has an extention', function () {\n      context('starts with \"htm\"', function () {\n        it('should be true', function () {\n          var route = new Route();\n          var isHtml = route._isHtmlPage('/anc/sds/aa.htm');\n          expect(isHtml).to.be['true'];\n        });\n      });\n\n      context('otherwise', function () {\n        it('should be false', function () {\n          var route = new Route();\n          var isHtml = route._isHtmlPage('/anc/sds/aa.xyz');\n          expect(isHtml).to.be['false'];\n        });\n      });\n    });\n  });\n\n  context('._buildContext', function () {\n    it('should build the desired context', function () {\n      var route = new Route();\n      var req = { url: '/the-url' };\n      var params = {\n        aa: 10, query: { bb: 20 }\n      };\n\n      var context = route._buildContext(req, params);\n      expect(context.route).to.be.equal(route);\n      expect(context._serverRequest).to.be.equal(req);\n\n      delete context.route;\n      delete context._serverRequest;\n      expect(context).to.be.deep.equal({\n        path: req.url,\n        params: { aa: 10 },\n        queryParams: { bb: 20 }\n      });\n\n      // check that the original params object wasn't modified\n      expect(params).to.be.deep.equal({\n        aa: 10, query: { bb: 20 }\n      });\n    });\n  });\n\n  context('._moveScriptsToBottom', function () {\n    it('should move all the scripts tags to bottom of body', function () {\n      var inputPage = '\\n        <html>\\n          <head>\\n            <title>The Title</title>\\n            <script type=\"text/javascript\" src=\"aa.js\"></script>\\n            <script type=\"text/javascript\" src=\"bb.js\"></script>\\n          </head>\\n\\n          <body>\\n            <div id=\"abc\"></div>\\n          </body>\\n        </html>\\n      ';\n\n      var expectedPage = '\\n        <html>\\n          <head>\\n            <title>The Title</title>\\n          </head>\\n\\n          <body>\\n            <div id=\"abc\"></div>\\n            <script type=\"text/javascript\" src=\"aa.js\"></script>\\n            <script type=\"text/javascript\" src=\"bb.js\"></script>\\n          </body>\\n        </html>\\n      ';\n\n      var route = new Route();\n      var returnedPage = route._moveScriptsToBottom(minifyHtml(inputPage));\n      expect(minifyHtml(returnedPage)).to.be.equal(minifyHtml(expectedPage));\n    });\n  });\n\n  context('_injectHtml', function () {\n    context('res.write() input data is a string', function () {\n      context('always', function () {\n        it('should inject head and body taken from the ssrContext', function (done) {\n          var router = {};\n          var route = new Route(router);\n          var req = { url: '/aaa/aa.html' };\n          var res = {\n            write: function () {\n              function write(html) {\n                var expectedHtml = '\\n                <html>\\n                  <head><head-content /></head>\\n                  <body><body-content /></body>\\n                </html>\\n              ';\n                expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n                done();\n              }\n\n              return write;\n            }()\n          };\n          var ssrContext = {\n            getHtml: function () {\n              function getHtml() {\n                return '<body-content />';\n              }\n\n              return getHtml;\n            }(),\n            getHead: function () {\n              function getHead() {\n                return '<head-content />';\n              }\n\n              return getHead;\n            }()\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          var inputHtml = '\\n            <html>\\n              <head></head>\\n              <body></body>\\n            </html>\\n          ';\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n\n      context('with deferScriptLoading option', function () {\n        it('should move scripts to bottom', function (done) {\n          var router = { deferScriptLoading: true };\n          var route = new Route(router);\n          var req = { url: '/aaa/aa.html' };\n          var res = {\n            write: function () {\n              function write(html) {\n                var expectedHtml = '\\n                <html>\\n                  <head></head>\\n                  <body>\\n                    <body-content></body-content>\\n                    <script src=\"aa.js\"></script>\\n                    <script src=\"bb.js\"></script>\\n                  </body>\\n                </html>\\n              ';\n                expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n                done();\n              }\n\n              return write;\n            }()\n          };\n          var ssrContext = {\n            getHtml: function () {\n              function getHtml() {\n                return '<body-content />';\n              }\n\n              return getHtml;\n            }(),\n            getHead: function () {\n              function getHead() {\n                return '<script src=\"bb.js\"></script>';\n              }\n\n              return getHead;\n            }()\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          var inputHtml = '\\n            <html>\\n              <head>\\n                <script src=\"aa.js\"></script>\\n              </head>\\n              <body></body>\\n            </html>\\n          ';\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n\n      context('with pageCacheTimeout option', function () {\n        it('should cache the page the mentioned timeout', function (done) {\n          var router = { pageCacheTimeout: true };\n          var route = new Route(router);\n          var req = { url: '/aaa/aa.html' };\n          var frData = { aa: 10 };\n          var res = {\n            write: function () {\n              function write(html) {\n                var expectedHtml = '\\n                <html>\\n                  <head><head-content /></head>\\n                  <body><body-content /></body>\\n                </html>\\n              ';\n                var cachedPage = route._getCachedPage(req.url);\n\n                expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n                expect(minifyHtml(cachedPage.html)).to.be.equal(minifyHtml(expectedHtml));\n                expect(cachedPage.frData).to.be.deep.equal(frData);\n                done();\n              }\n\n              return write;\n            }()\n          };\n          InjectData.pushData(res, 'fast-render-data', frData);\n\n          var ssrContext = {\n            getHtml: function () {\n              function getHtml() {\n                return '<body-content />';\n              }\n\n              return getHtml;\n            }(),\n            getHead: function () {\n              function getHead() {\n                return '<head-content />';\n              }\n\n              return getHead;\n            }()\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          var inputHtml = '\\n            <html>\\n              <head></head>\\n              <body></body>\\n            </html>\\n          ';\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n    });\n\n    context('res.write() input data in not a string', function () {\n      it('should not alter the input', function (done) {\n        var router = {};\n        var route = new Route(router);\n        var req = { url: '/aaa/aa.html' };\n        var writeData = { something: 'else' };\n\n        var res = {\n          write: function () {\n            function write(data) {\n              expect(data).to.be.deep.equal(writeData);\n              done();\n            }\n\n            return write;\n          }()\n        };\n\n        route._injectHtml(req, res);\n        res.write(writeData);\n      });\n    });\n  });\n\n  context('_processFromSsr', function () {\n    context('always', function () {\n      it('should call the action properly', function (done) {\n        var params = { aa: 10 };\n        var context = {\n          params: { aa: 10 }, queryParams: { bb: 10 }\n        };\n        var req = { url: 'the-url' };\n        var res = {};\n\n        var router = new Router();\n        var action = function action(p, q) {\n          var c = router.routeContext.get();\n          expect(p).to.be.deep.equal(c.params);\n          expect(q).to.be.deep.equal(c.queryParams);\n\n          expect(router.ssrContext).to.be.ok;\n          done();\n        };\n\n        var route = new Route(router, '/', { action: action });\n        route._buildContext = function (r, p) {\n          expect(r.url).to.be.equal(req.url);\n          expect(p).to.be.deep.equal(params);\n          return context;\n        };\n\n        route._processFromSsr(params, req, res);\n      });\n\n      it('should call the ._injectHtml()', function (done) {\n        var req = { url: 'the-url' };\n        var res = {};\n\n        var router = new Router();\n        var route = new Route(router, '/', {});\n\n        route._buildContext = function () {\n          return null;\n        };\n        route._injectHtml = function (_req, _res, _ssrContext) {\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n          expect(_ssrContext).to.be.instanceOf(SsrContext);\n          done();\n        };\n        route._processFromSsr(null, req, res);\n      });\n    });\n\n    context('with frData', function () {\n      it('should add it to the ssr context', function (done) {\n        var req = { url: 'the-url' };\n        var doc = { _id: 'aa', aa: 10 };\n        var frData = {\n          collectionData: {\n            posts: [[doc]]\n          }\n        };\n        var res = {};\n        InjectData.pushData(res, 'fast-render-data', frData);\n\n        var router = new Router();\n        var route = new Route(router, '/', {});\n\n        route._buildContext = function () {\n          return null;\n        };\n        route._injectHtml = function (_req, _res, ssrContext) {\n          var docs = ssrContext.getCollection('posts').find().fetch();\n          expect(docs).to.be.deep.equal([doc]);\n          done();\n        };\n        route._processFromSsr(null, req, res);\n      });\n    });\n  });\n\n  context('_processFromCache', function () {\n    it('should inject the cached html', function (done) {\n      var route = new Route();\n      var pageInfo = { html: 'the-html' };\n\n      var res = {\n        write: function () {\n          function write(data) {\n            expect(data).to.be.equal(pageInfo.html);\n            done();\n          }\n\n          return write;\n        }()\n      };\n\n      route._processFromCache(pageInfo, res, function () {\n        res.write('');\n      });\n    });\n\n    it('should inject the frData', function () {\n      var route = new Route();\n      var pageInfo = { frData: { aa: 10 } };\n\n      var res = {};\n\n      route._processFromCache(pageInfo, res, function () {});\n      var frData = InjectData.getData(res, 'fast-render-data');\n      expect(frData).to.be.deep.equal(pageInfo.frData);\n    });\n  });\n\n  context('_handleRoute', function () {\n    context('not a html page', function () {\n      it('should simply call next', function (done) {\n        var route = new Route();\n        var req = { url: '/aa.jpg' };\n        DDP._CurrentInvocation.withValue({ userId: 'someId' }, function () {\n          route._handleRoute(null, req, null, done);\n        });\n      });\n    });\n\n    context('if the page is cahced', function () {\n      it('should process the cached page', function (done) {\n        var route = new Route();\n        var req = { url: '/aa.html' };\n        var res = { write: function () {\n            function write() {}\n\n            return write;\n          }() };\n        var next = function next() {\n          throw new Error('should not call next');\n        };\n        var pageInfo = { aa: 10 };\n\n        route._processFromCache = function (c, r, n) {\n          expect(c).to.be.deep.equal(pageInfo);\n          expect(r).to.be.equal(res);\n          expect(n).to.be.equal(next);\n          done();\n        };\n\n        // let's cache the page\n        var userId = 'aaa';\n        route._cachePage(req.url, userId, pageInfo, 100);\n        DDP._CurrentInvocation.withValue({ userId: userId }, function () {\n          route._handleRoute(null, req, res, next);\n        });\n      });\n    });\n\n    context('otherwise', function () {\n      it('should handle SSR with FastRender', function (done) {\n        var route = new Route();\n        var req = { url: '/aa.html' };\n        var res = { write: function () {\n            function write() {}\n\n            return write;\n          }() };\n        var next = function next() {\n          throw new Error('should not call next');\n        };\n        var params = {};\n\n        var originalHandleRoute = FastRender.handleRoute;\n\n        route._processFromSsr = function (_params, _req, _res) {\n          expect(_params).to.be.equal(params);\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n\n          done();\n        };\n\n        FastRender.handleRoute = function (processFromSsr, _params, _req, _res, _next) {\n          expect(_params).to.be.equal(params);\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n          expect(_next).to.be.equal(next);\n\n          // restore FastRender's original handleRoute\n          FastRender.handleRoute = originalHandleRoute;\n          processFromSsr();\n        };\n\n        DDP._CurrentInvocation.withValue({ userId: 'someId' }, function () {\n          route._handleRoute(params, req, res, next);\n        });\n      });\n    });\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/kadira:flow-router-ssr/server/__tests__/route.js"],"names":[],"mappings":"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","file":"/packages/kadira:flow-router-ssr/server/__tests__/route.js.map","sourcesContent":["const minifyHtml = str => {\n  return str.split('\\n').map(line => line.trim()).join('');\n};\n\ndescribe('Route', () => {\n  context('page Caching', () => {\n    context('new page', () => {\n      it('should be able to cache the page and get it back', () => {\n        const route = new Route();\n        const pageInfo = {aa: 10};\n        const userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        expect(route._getCachedPage('/the-url', userId)).to.be.deep.equal(pageInfo);\n      });\n\n      it('should expire the page after a timeout', () => {\n        const route = new Route();\n        const pageInfo = {aa: 10};\n        const userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        Meteor._sleepForMs(200);\n        expect(route._getCachedPage('/the-url', userId)).to.be.null;\n      });\n    });\n\n    context('exiting page', () => {\n      it('should throw an error when trying to cache again', () => {\n        const route = new Route();\n        const pageInfo = {aa: 10};\n        const userId = 'aaaa';\n\n        route._cachePage('/the-url', userId, pageInfo, 100);\n        // doing it for the second time.\n        route._cachePage('/the-url', userId, {aa: 2323}, 100);\n\n        const cachedPage = route._getCachedPage('/the-url', userId);\n        expect(cachedPage).to.be.deep.equal(pageInfo);\n      });\n    });\n  });\n\n  context('._isHtmlPage', () => {\n    context('no extention', () => {\n      context('should be true', () => {\n        const route = new Route();\n        const isHtml = route._isHtmlPage('/anc/sds');\n        expect(isHtml).to.be.true;\n      });\n    });\n\n    context('has an extention', () => {\n      context('starts with \"htm\"', () => {\n        it('should be true', () => {\n          const route = new Route();\n          const isHtml = route._isHtmlPage('/anc/sds/aa.htm');\n          expect(isHtml).to.be.true;\n        });\n      });\n\n      context('otherwise', () => {\n        it('should be false', () => {\n          const route = new Route();\n          const isHtml = route._isHtmlPage('/anc/sds/aa.xyz');\n          expect(isHtml).to.be.false;\n        });\n      });\n    });\n  });\n\n  context('._buildContext', () => {\n    it('should build the desired context', () => {\n      const route = new Route();\n      const req = {url: '/the-url'};\n      const params = {\n        aa: 10, query: {bb: 20}\n      };\n\n      const context = route._buildContext(req, params);\n      expect(context.route).to.be.equal(route);\n      expect(context._serverRequest).to.be.equal(req);\n\n      delete context.route;\n      delete context._serverRequest;\n      expect(context).to.be.deep.equal({\n        path: req.url,\n        params: {aa: 10},\n        queryParams: {bb: 20}\n      });\n\n      // check that the original params object wasn't modified\n      expect(params).to.be.deep.equal({\n        aa: 10, query: {bb: 20}\n      });\n    });\n  });\n\n  context('._moveScriptsToBottom', () => {\n    it('should move all the scripts tags to bottom of body', () => {\n      const inputPage = `\n        <html>\n          <head>\n            <title>The Title</title>\n            <script type=\"text/javascript\" src=\"aa.js\"></script>\n            <script type=\"text/javascript\" src=\"bb.js\"></script>\n          </head>\n\n          <body>\n            <div id=\"abc\"></div>\n          </body>\n        </html>\n      `;\n\n      const expectedPage = `\n        <html>\n          <head>\n            <title>The Title</title>\n          </head>\n\n          <body>\n            <div id=\"abc\"></div>\n            <script type=\"text/javascript\" src=\"aa.js\"></script>\n            <script type=\"text/javascript\" src=\"bb.js\"></script>\n          </body>\n        </html>\n      `;\n\n      const route = new Route();\n      const returnedPage = route._moveScriptsToBottom(minifyHtml(inputPage));\n      expect(minifyHtml(returnedPage)).to.be.equal(minifyHtml(expectedPage));\n    });\n  });\n\n  context('_injectHtml', () => {\n    context('res.write() input data is a string', () => {\n      context('always', () => {\n        it('should inject head and body taken from the ssrContext', done => {\n          const router = {};\n          const route = new Route(router);\n          const req = {url: '/aaa/aa.html'};\n          const res = {\n            write: html => {\n              const expectedHtml = `\n                <html>\n                  <head><head-content /></head>\n                  <body><body-content /></body>\n                </html>\n              `;\n              expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n              done();\n            }\n          };\n          const ssrContext = {\n            getHtml: () => '<body-content />',\n            getHead: () => '<head-content />'\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          const inputHtml = `\n            <html>\n              <head></head>\n              <body></body>\n            </html>\n          `;\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n\n      context('with deferScriptLoading option', () => {\n        it('should move scripts to bottom', done => {\n          const router = {deferScriptLoading: true};\n          const route = new Route(router);\n          const req = {url: '/aaa/aa.html'};\n          const res = {\n            write: html => {\n              const expectedHtml = `\n                <html>\n                  <head></head>\n                  <body>\n                    <body-content></body-content>\n                    <script src=\"aa.js\"></script>\n                    <script src=\"bb.js\"></script>\n                  </body>\n                </html>\n              `;\n              expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n              done();\n            }\n          };\n          const ssrContext = {\n            getHtml: () => '<body-content />',\n            getHead: () => '<script src=\"bb.js\"></script>'\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          const inputHtml = `\n            <html>\n              <head>\n                <script src=\"aa.js\"></script>\n              </head>\n              <body></body>\n            </html>\n          `;\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n\n      context('with pageCacheTimeout option', () => {\n        it('should cache the page the mentioned timeout', done => {\n          const router = {pageCacheTimeout: true};\n          const route = new Route(router);\n          const req = {url: '/aaa/aa.html'};\n          const frData = {aa: 10};\n          const res = {\n            write: html => {\n              const expectedHtml = `\n                <html>\n                  <head><head-content /></head>\n                  <body><body-content /></body>\n                </html>\n              `;\n              const cachedPage = route._getCachedPage(req.url);\n\n              expect(minifyHtml(html)).to.be.equal(minifyHtml(expectedHtml));\n              expect(minifyHtml(cachedPage.html)).to.be.equal(minifyHtml(expectedHtml));\n              expect(cachedPage.frData).to.be.deep.equal(frData);\n              done();\n            }\n          };\n          InjectData.pushData(res, 'fast-render-data', frData);\n\n          const ssrContext = {\n            getHtml: () => '<body-content />',\n            getHead: () => '<head-content />'\n          };\n\n          route._injectHtml(req, res, ssrContext);\n          const inputHtml = `\n            <html>\n              <head></head>\n              <body></body>\n            </html>\n          `;\n          res.write(minifyHtml(inputHtml));\n        });\n      });\n    });\n\n    context('res.write() input data in not a string', () => {\n      it('should not alter the input', done => {\n        const router = {};\n        const route = new Route(router);\n        const req = {url: '/aaa/aa.html'};\n        const writeData = {something: 'else'};\n\n        const res = {\n          write: data => {\n            expect(data).to.be.deep.equal(writeData);\n            done();\n          }\n        };\n\n        route._injectHtml(req, res);\n        res.write(writeData);\n      });\n    });\n  });\n\n  context('_processFromSsr', () => {\n    context('always', () => {\n      it('should call the action properly', done => {\n        const params = {aa: 10};\n        const context = {\n          params: {aa: 10}, queryParams: {bb: 10}\n        };\n        const req = {url: 'the-url'};\n        const res = {};\n\n        const router = new Router();\n        const action = (p, q) => {\n          const c = router.routeContext.get();\n          expect(p).to.be.deep.equal(c.params);\n          expect(q).to.be.deep.equal(c.queryParams);\n\n          expect(router.ssrContext).to.be.ok;\n          done();\n        };\n\n        const route = new Route(router, '/', {action});\n        route._buildContext = (r, p) => {\n          expect(r.url).to.be.equal(req.url);\n          expect(p).to.be.deep.equal(params);\n          return context;\n        };\n\n        route._processFromSsr(params, req, res);\n      });\n\n      it('should call the ._injectHtml()', done => {\n        const req = {url: 'the-url'};\n        const res = {};\n\n        const router = new Router();\n        const route = new Route(router, '/', {});\n\n        route._buildContext = () => null;\n        route._injectHtml = (_req, _res, _ssrContext) => {\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n          expect(_ssrContext).to.be.instanceOf(SsrContext);\n          done();\n        };\n        route._processFromSsr(null, req, res);\n      });\n    });\n\n    context('with frData', () => {\n      it('should add it to the ssr context', done => {\n        const req = {url: 'the-url'};\n        const doc = {_id: 'aa', aa: 10};\n        const frData = {\n          collectionData: {\n            posts: [[doc]]\n          }\n        };\n        const res = {};\n        InjectData.pushData(res, 'fast-render-data', frData);\n\n        const router = new Router();\n        const route = new Route(router, '/', {});\n\n        route._buildContext = () => null;\n        route._injectHtml = (_req, _res, ssrContext) => {\n          const docs = ssrContext.getCollection('posts').find().fetch();\n          expect(docs).to.be.deep.equal([doc]);\n          done();\n        };\n        route._processFromSsr(null, req, res);\n      });\n    });\n  });\n\n  context('_processFromCache', () => {\n    it('should inject the cached html', done => {\n      const route = new Route();\n      const pageInfo = {html: 'the-html'};\n\n      const res = {\n        write: data => {\n          expect(data).to.be.equal(pageInfo.html);\n          done();\n        }\n      };\n\n      route._processFromCache(pageInfo, res, () => {\n        res.write('');\n      });\n    });\n\n    it('should inject the frData', () => {\n      const route = new Route();\n      const pageInfo = {frData: {aa: 10}};\n\n      const res = {};\n\n      route._processFromCache(pageInfo, res, () => {});\n      const frData = InjectData.getData(res, 'fast-render-data');\n      expect(frData).to.be.deep.equal(pageInfo.frData);\n    });\n  });\n\n  context('_handleRoute', () => {\n    context('not a html page', () => {\n      it('should simply call next', done => {\n        const route = new Route();\n        const req = {url: '/aa.jpg'};\n        DDP._CurrentInvocation.withValue({userId: 'someId'}, () => {\n          route._handleRoute(null, req, null, done);\n        });\n      });\n    });\n\n    context('if the page is cahced', () => {\n      it('should process the cached page', done => {\n        const route = new Route();\n        const req = {url: '/aa.html'};\n        const res = {write: () => {}};\n        const next = () => {throw new Error('should not call next');};\n        const pageInfo = {aa: 10};\n\n        route._processFromCache = (c, r, n) => {\n          expect(c).to.be.deep.equal(pageInfo);\n          expect(r).to.be.equal(res);\n          expect(n).to.be.equal(next);\n          done();\n        };\n\n        // let's cache the page\n        const userId = 'aaa';\n        route._cachePage(req.url, userId, pageInfo, 100);\n        DDP._CurrentInvocation.withValue({userId}, () => {\n          route._handleRoute(null, req, res, next);\n        });\n      });\n    });\n\n    context('otherwise', () => {\n      it('should handle SSR with FastRender', done => {\n        const route = new Route();\n        const req = {url: '/aa.html'};\n        const res = {write: () => {}};\n        const next = () => {throw new Error('should not call next');};\n        const params = {};\n\n        const originalHandleRoute = FastRender.handleRoute;\n\n        route._processFromSsr = (_params, _req, _res) => {\n          expect(_params).to.be.equal(params);\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n\n          done();\n        };\n\n        FastRender.handleRoute = (processFromSsr, _params, _req, _res, _next) => {\n          expect(_params).to.be.equal(params);\n          expect(_req).to.be.equal(req);\n          expect(_res).to.be.equal(res);\n          expect(_next).to.be.equal(next);\n\n          // restore FastRender's original handleRoute\n          FastRender.handleRoute = originalHandleRoute;\n          processFromSsr();\n        };\n\n        DDP._CurrentInvocation.withValue({userId: 'someId'}, () => {\n          route._handleRoute(params, req, res, next);\n        });\n      });\n    });\n  });\n});\n"]},"hash":"bc97c3e89ea9225058cb6ceecba405bf0fc20c02"}
