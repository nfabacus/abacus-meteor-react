{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/kadira:dochead/test/client.js","filenameRelative":"/packages/kadira:dochead/test/client.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/kadira:dochead/test/client.js.map","sourceFileName":"/packages/kadira:dochead/test/client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"client"},"ignored":false,"code":"Tinytest.add('Client - setTitle', function (test) {\n  var id = Random.id();\n  DocHead.setTitle(id);\n  test.equal(document.title, id);\n});\n\nTinytest.add('Client - getTitle', function (test) {\n  var id = Random.id();\n  document.title = id;\n  test.equal(DocHead.getTitle(), id);\n});\n\nTinytest.addAsync('Client - getTitle reactivity', function (test, next) {\n  // Call the next function after we reactively received 3 title changes (+1\n  // for Tracker.autorun immediate invocation).\n  var n = 3;\n  var titleChanged = _.after(n + 1, next);\n  Tracker.autorun(function () {\n    DocHead.getTitle();\n    titleChanged();\n  });\n  _.times(n, function () {\n    var id = Random.id();\n    DocHead.setTitle(id);\n    Tracker.flush();\n  });\n});\n\nTinytest.add('Client - addMeta', function (test) {\n  var metaInfo = { name: \"description\", content: \"awesome content\" };\n  DocHead.addMeta(metaInfo);\n  var metaDom = document.querySelectorAll('meta[name=description]')[0];\n  test.equal(metaDom.getAttribute('name'), metaInfo.name);\n  test.equal(metaDom.getAttribute('content'), metaInfo.content);\n});\n\nTinytest.add('Client - addLdJsonScript', function (test, done) {\n  var snippet = {\n    '@context': 'http://schema.org',\n    '@type': 'Organization',\n    url: 'http://www.example.com',\n    logo: 'http://www.example.com/images/logo.png'\n  };\n  DocHead.addLdJsonScript(snippet);\n  var tag = document.querySelectorAll('script[dochead=\"1\"]')[0];\n  var obj = JSON.parse(tag.innerHTML);\n  test.equal(obj, snippet);\n});\n\nTinytest.add('Client - remove exising meta tags', function (test) {\n  var metaInfo = { name: \"description\", content: \"awesome content\" };\n  DocHead.addMeta(metaInfo);\n\n  DocHead.removeDocHeadAddedTags();\n\n  metaInfo.content = \"nice one\";\n  DocHead.addMeta(metaInfo);\n\n  var metaDom = document.querySelectorAll('meta[name=description]');\n  var metaDomSingle = metaDom[0];\n  test.equal(metaDomSingle.getAttribute('name'), metaInfo.name);\n  test.equal(metaDomSingle.getAttribute('content'), metaInfo.content);\n\n  // Only have the last one, even we add the same meta twice\n  // DocHead differenciate meta by name\n  // If not provided, it simply ignore them\n  test.equal(metaDom.length, 1);\n});\n\nTinytest.addAsync('Client - loadScript', function (test, done) {\n  var scriptUrl = '/packages/local-test_kadira_dochead/test/fakescript.js';\n  test.equal(window.fakeScriptLoaded, undefined);\n  DocHead.loadScript(scriptUrl, function () {\n    test.equal(window.fakeScriptLoaded, true);\n    done();\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/kadira:dochead/test/client.js"],"names":[],"mappings":"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","file":"/packages/kadira:dochead/test/client.js.map","sourcesContent":["Tinytest.add('Client - setTitle', function(test) {\n  const id = Random.id();\n  DocHead.setTitle(id);\n  test.equal(document.title, id);\n});\n\nTinytest.add('Client - getTitle', function(test) {\n  const id = Random.id();\n  document.title = id;\n  test.equal(DocHead.getTitle(), id);\n});\n\nTinytest.addAsync('Client - getTitle reactivity', function(test, next) {\n  // Call the next function after we reactively received 3 title changes (+1\n  // for Tracker.autorun immediate invocation).\n  const n = 3;\n  const titleChanged = _.after(n + 1, next);\n  Tracker.autorun(() => {\n    DocHead.getTitle();\n    titleChanged();\n  });\n  _.times(n, () => {\n    const id = Random.id();\n    DocHead.setTitle(id);\n    Tracker.flush();\n  });\n});\n\n\nTinytest.add('Client - addMeta', function(test) {\n  const metaInfo = {name: \"description\", content: \"awesome content\"};\n  DocHead.addMeta(metaInfo);\n  const metaDom = document.querySelectorAll('meta[name=description]')[0];\n  test.equal(metaDom.getAttribute('name'), metaInfo.name);\n  test.equal(metaDom.getAttribute('content'), metaInfo.content);\n});\n\nTinytest.add('Client - addLdJsonScript', function(test, done) {\n  const snippet = {\n    '@context': 'http://schema.org',\n    '@type': 'Organization',\n    url: 'http://www.example.com',\n    logo: 'http://www.example.com/images/logo.png'\n  };\n  DocHead.addLdJsonScript(snippet);\n  const tag = document.querySelectorAll('script[dochead=\"1\"]')[0];\n  const obj = JSON.parse(tag.innerHTML);\n  test.equal(obj, snippet);\n});\n\nTinytest.add('Client - remove exising meta tags', function(test) {\n  const metaInfo = {name: \"description\", content: \"awesome content\"};\n  DocHead.addMeta(metaInfo);\n\n  DocHead.removeDocHeadAddedTags();\n\n  metaInfo.content = \"nice one\";\n  DocHead.addMeta(metaInfo);\n\n  const metaDom = document.querySelectorAll('meta[name=description]');\n  const metaDomSingle = metaDom[0];\n  test.equal(metaDomSingle.getAttribute('name'), metaInfo.name);\n  test.equal(metaDomSingle.getAttribute('content'), metaInfo.content);\n\n  // Only have the last one, even we add the same meta twice\n  // DocHead differenciate meta by name\n  // If not provided, it simply ignore them\n  test.equal(metaDom.length, 1);\n});\n\nTinytest.addAsync('Client - loadScript', function(test, done) {\n  const scriptUrl = '/packages/local-test_kadira_dochead/test/fakescript.js';\n  test.equal(window.fakeScriptLoaded, undefined);\n  DocHead.loadScript(scriptUrl, function() {\n    test.equal(window.fakeScriptLoaded, true);\n    done();\n  });\n});\n"]},"hash":"e13c2754a18ef6697c09239f72faf8d8dad8bad0"}
